---
import FavoriteCitySelect from "../components/FavoriteCitySelect.astro";
import Search from "../components/Search.astro";
import RootLayout from "../layout/RootLayout.astro";
---

<RootLayout title="Weather APP">
	<header class="mb-10 flex items-center justify-between">
		<h1 class="text-xl font-bold">Weather App</h1>
	</header>
	<main>
		<div class="flex justify-between">
			<FavoriteCitySelect />
			<Search />
		</div>
		<div
			class="relative mx-auto mt-12 mb-12 flex w-[300px] flex-col gap-y-2 rounded-[15px] border border-white/20 bg-gray-500/30 text-center text-white shadow-[0_5px_15px_rgba(0,0,0,0.35)] backdrop-blur-md"
		>
			<h2 id="c-city" class="mt-3 text-4xl font-semibold text-white">City</h2>
			<div class="top-s1 absolute right-3 text-3xl">★</div>
			<div class="flex flex-col justify-center gap-y-2">
				<div class="mx-auto h-30 w-30 max-w-md">
					<img class="h-full w-full object-cover" id="weather-icon" src="" alt="weather icon" />
				</div>
				<span id="c-weather" class="text-2xl font-semibold text-white">---</span>
				<span id="c-temp" class="text-5xl font-semibold text-white">--°C</span>
			</div>
			<span id="c-date" class="mt-2 mb-3 text-lg text-white">Weekday, Month DD, YYYY</span>
		</div>
		<div class="mb-8">
			Daily Forecast
			<div class="flex flex-wrap justify-around gap-4" id="daily_weather">
				<div class="day-card flex w-40 flex-col gap-2 rounded-xl bg-white/50 p-4 text-center shadow backdrop-blur-md">
					<h3 class="day-name font-semibold"></h3>
					<span class="day-icon mt-1 text-4xl"></span>
					<p class="temp-range"></p>
				</div>
				<div class="day-card flex w-40 flex-col gap-2 rounded-xl bg-white/50 p-4 text-center shadow backdrop-blur-md">
					<h3 class="day-name font-semibold"></h3>
					<span class="day-icon mt-1 text-4xl"></span>
					<p class="temp-range"></p>
				</div>
				<div class="day-card flex w-40 flex-col gap-2 rounded-xl bg-white/50 p-4 text-center shadow backdrop-blur-md">
					<h3 class="day-name font-semibold"></h3>
					<span class="day-icon mt-1 text-4xl"></span>
					<p class="temp-range"></p>
				</div>
				<div class="day-card flex w-40 flex-col gap-2 rounded-xl bg-white/50 p-4 text-center shadow backdrop-blur-md">
					<h3 class="day-name font-semibold"></h3>
					<span class="day-icon mt-1 text-4xl"></span>
					<p class="temp-range"></p>
				</div>
				<div class="day-card flex w-40 flex-col gap-2 rounded-xl bg-white/50 p-4 text-center shadow backdrop-blur-md">
					<h3 class="day-name font-semibold"></h3>
					<span class="day-icon mt-1 text-4xl"></span>
					<p class="temp-range"></p>
				</div>
			</div>
		</div>
		<section>
			Hourly Forecast
			<div class="flex flex-wrap justify-around gap-4" id="hourly_weather">
				<div
					class="hourly-card flex w-30 flex-col gap-2 rounded-xl bg-white/50 p-4 text-center shadow backdrop-blur-md"
				>
					<p class="font-semibold">03:00</p>
					<span class="hourly-icon text-2x1 mt-1"></span>
					<p class="temperature"></p>
				</div>
				<div
					class="hourly-card flex w-30 flex-col gap-2 rounded-xl bg-white/50 p-4 text-center shadow backdrop-blur-md"
				>
					<p class="font-semibold">06:00</p>
					<span class="hourly-icon text-2x1 mt-1"></span>
					<p class="temperature"></p>
				</div>
				<div
					class="hourly-card flex w-30 flex-col gap-2 rounded-xl bg-white/50 p-4 text-center shadow backdrop-blur-md"
				>
					<p class="font-semibold">09:00</p>
					<span class="hourly-icon text-2x1 mt-1"></span>
					<p class="temperature"></p>
				</div>
				<div
					class="hourly-card flex w-30 flex-col gap-2 rounded-xl bg-white/50 p-4 text-center shadow backdrop-blur-md"
				>
					<p class="font-semibold">12:00</p>
					<span class="hourly-icon text-2x1 mt-1"></span>
					<p class="temperature"></p>
				</div>
				<div
					class="hourly-card flex w-30 flex-col gap-2 rounded-xl bg-white/50 p-4 text-center shadow backdrop-blur-md"
				>
					<p class="font-semibold">15:00</p>
					<span class="hourly-icon text-2x1 mt-1"></span>
					<p class="temperature"></p>
				</div>
				<div
					class="hourly-card flex w-30 flex-col gap-2 rounded-xl bg-white/50 p-4 text-center shadow backdrop-blur-md"
				>
					<p class="font-semibold">18:00</p>
					<span class="hourly-icon text-2x1 mt-1"></span>
					<p class="temperature"></p>
				</div>
				<div
					class="hourly-card flex w-30 flex-col gap-2 rounded-xl bg-white/50 p-4 text-center shadow backdrop-blur-md"
				>
					<p class="font-semibold">21:00</p>
					<span class="hourly-icon text-2x1 mt-1"></span>
					<p class="temperature"></p>
				</div>
				<div
					class="hourly-card flex w-30 flex-col gap-2 rounded-xl bg-white/50 p-4 text-center shadow backdrop-blur-md"
				>
					<p class="font-semibold">00:00</p>
					<span class="hourly-icon text-2x1 mt-1"></span>
					<p class="temperature"></p>
				</div>
			</div>
		</section>
	</main>
	<script>
		import { getWeatherDescription } from "../utils/convertWeatherCode";
		import { formatDateToYYYYMMDD } from "../utils/date";

		let currentLocation = {
			latitude: "49.2827",
			longitude: "-123.1207",
		};
		navigator.geolocation.getCurrentPosition(
			(pos) => {
				currentLocation = {
					latitude: String(pos.coords.latitude),
					longitude: String(pos.coords.longitude),
				};
			},
			(_err) => {
				alert("failed to get the current position");
			},
		);

		const hourly = "temperature_2m,precipitation_probability,weather_code";
		const forecast_days = "5";
		const current = "temperature_2m,is_day,precipitation,weather_code,apparent_temperature";
		const daily = "weather_code,temperature_2m_max,temperature_2m_min,sunrise,sunset";
		const meteoUrl = "https://api.open-meteo.com/v1/forecast";

		const fetchCurrentCity = async () => {
			const response = await fetch(
				`https://api.radar.io/v1/geocode/reverse?coordinates=${currentLocation.latitude},${currentLocation.longitude}`,
				{
					headers: {
						Authorization: "prj_live_pk_2fb2c81cb7c057cb30ce030dbd1f7a3b105179f9",
					},
				},
			);
			const locationData = await response.json();
			const currentCity = locationData.addresses[0].city;

			return currentCity;
		};

		const fetchWeatherData = async (url) => {
			const response = await fetch(url);
			if (response.ok) {
				const fetchData = await response.json();
				/**
				 * Current Result Example
				 * interval: 900
				 * is_day: 1
				 * precipitation: 0
				 * temperature_2m: 13
				 * time: "2025-04-14T22:15"
				 * weather_code: 3
				 */
				const currentWeather = { ...fetchData.current, ...currentLocation };
				console.log(currentWeather);

				document.body.style.backgroundImage = `url('${getWeatherDescription(currentWeather.weather_code).background}')`;

				const temp = currentWeather.temperature_2m;
				document.getElementById("c-temp").textContent = temp ? `${temp}℃` : "--℃";

				document.getElementById("c-city").textContent = await fetchCurrentCity();
				document.getElementById("weather-icon").src = getWeatherDescription(currentWeather.weather_code).image;
				document.getElementById("c-weather").textContent = getWeatherDescription(currentWeather.weather_code).name;

				const today = new Date();
				const formattedDate = today.toLocaleDateString("en-US", {
					weekday: "long",
					year: "numeric",
					month: "long",
					day: "numeric",
				});

				document.getElementById("c-date").textContent = formattedDate;

				const fiveDays = fetchData.daily.time;
				const fiveDaysTempMax = fetchData.daily.temperature_2m_max;
				const fiveDaysTempMin = fetchData.daily.temperature_2m_min;
				const fiveWeatherCode = fetchData.daily.weather_code;
				const fiveDaysWeather = fiveDays.map((f, index) => {
					return {
						day: f,
						tempMax: fiveDaysTempMax[index],
						tempMin: fiveDaysTempMin[index],
						weekCode: fiveWeatherCode[index],
					};
				});
				console.log(fiveDaysWeather);

				const dayCards = document.querySelectorAll(".day-card");

				fiveDaysWeather.forEach((dayData, index) => {
					if (dayCards[index]) {
						const weekday = new Date(dayData.day).toLocaleString("en-US", { weekday: "short" });
						const icon = getWeatherDescription(dayData.weekCode).image;
						const temp = `${dayData.tempMin}°C / ${dayData.tempMax}°C`;

						dayCards[index].querySelector(".day-name").textContent = weekday;
						dayCards[index].querySelector(".day-icon").textContent = icon;
						dayCards[index].querySelector(".temp-range").textContent = temp;
					}
				});
				const currentDate = formatDateToYYYYMMDD(new Date());
				const hourlyData = fetchData.hourly.time.map((time, index) => ({
					time,
					date: time.split("T")[0],
					hour: Number(time.split("T")[1].split(":")[0]),
					temperature: fetchData.hourly.temperature_2m[index],
					precipitationProbability: fetchData.hourly.precipitation_probability[index],
					weatherCode: fetchData.hourly.weather_code[index],
				}));

				const selectedDayHourly = hourlyData.filter((data) => data.date === currentDate && data.hour % 3 === 0);
				console.log(selectedDayHourly);

				const hourlyCards = document.querySelectorAll(".hourly-card");

				hourlyData.forEach((hourlyData, index) => {
					if (hourlyCards[index]) {
						const icon = getWeatherDescription(hourlyData.weatherCode).image;
						const temp = `${hourlyData.temperature}°C`;

						hourlyCards[index].querySelector(".hourly-icon").textContent = icon;
						hourlyCards[index].querySelector(".temperature").textContent = temp;
					}
				});
			} else {
				alert("Failed to fetch weather data");
			}
		};

		document.addEventListener("DOMContentLoaded", async function () {
			const params = { ...currentLocation, current, daily, hourly, forecast_days };
			const urlSearchParams = new URLSearchParams(params);
			const url = `${meteoUrl}?${urlSearchParams}`;
			await fetchWeatherData(url);
		});

		document.addEventListener("locationSelected", async (e) => {
			const detail = e.detail;

			const lat = detail.lat;
			const lng = detail.lng;
			currentLocation = { latitude: lat, longitude: lng };
			const params = { ...currentLocation, current, daily, hourly, forecast_days };
			const urlSearchParams = new URLSearchParams(params);
			const url = `${meteoUrl}?${urlSearchParams}`;

			await fetchWeatherData(url);
		});
	</script>
</RootLayout>
