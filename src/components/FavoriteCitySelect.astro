<div class="relative inline-block text-left">
	<!-- Pill-style dropdown button -->
	<button
		id="menu-button"
		type="button"
		class="inline-flex items-center justify-between rounded-full border-2 border-black bg-white px-6 py-2 text-lg font-medium whitespace-nowrap text-gray-900 focus:outline-none"
	>
		<span id="dropdown-label">Favorite Cities</span>
		<svg class="ml-2 h-4 w-4 text-gray-900" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
			<path
				fill-rule="evenodd"
				d="M5.23 7.21a.75.75 0 011.06.02L10 11.17l3.71-3.94a.75.75 0 011.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z"
				clip-rule="evenodd"></path>
		</svg>
	</button>

	<!-- Dropdown list under the button -->
	<div
		id="dropdown-menu"
		class="ring-opacity-5 absolute top-full left-0 z-10 mt-1 hidden min-w-full rounded-md bg-white shadow-lg ring-1 ring-black"
		role="menu"
		aria-orientation="vertical"
		aria-labelledby="menu-button"
	>
		<div id="dropdown-cities" class="py-1"></div>
	</div>
</div>

<script client:load>
	const menuButton = document.getElementById("menu-button");
	const dropdownMenu = document.getElementById("dropdown-menu");
	const dropdownCities = document.getElementById("dropdown-cities");
	const dropdownLabel = document.getElementById("dropdown-label");

	// Render the favorite cities into the dropdown
	function renderFavoriteDropdown() {
		const favorites = JSON.parse(localStorage.getItem("favorites") || "[]");

		if (favorites.length === 0) {
			dropdownCities.innerHTML = `<span class="block px-4 py-2 text-gray-500 text-sm">No favorites yet</span>`;
			return;
		}

		dropdownCities.innerHTML = favorites
			.map(
				({ city }) => `
        <button
          type="button"
          class="city-option block w-full text-left px-4 py-2 text-lg whitespace-nowrap text-gray-900 hover:bg-gray-100"
          data-city="${city}"
        >
          ${city}
        </button>
      `,
			)
			.join("");
	}

	// Initialize dropdown on load and update on favorite changes
	window.addEventListener("DOMContentLoaded", renderFavoriteDropdown);
	window.addEventListener("favoriteUpdated", renderFavoriteDropdown);

	// Toggle the dropdown visibility when button is clicked
	menuButton.addEventListener("click", (e) => {
		e.stopPropagation();
		dropdownMenu.classList.toggle("hidden");
	});

	// Hide dropdown if clicking outside
	document.addEventListener("click", () => {
		dropdownMenu.classList.add("hidden");
	});

	// Handle city selection from dropdown
	dropdownCities.addEventListener("click", (e) => {
		const target = e.target;
		if (!target.classList.contains("city-option")) return;
		e.preventDefault();

		const city = target.getAttribute("data-city");
		const favorites = JSON.parse(localStorage.getItem("favorites") || "[]");
		const fav = favorites.find((f) => f.city === city);

		if (fav) {
			// Update the label
			dropdownLabel.textContent = city;

			// Save to localStorage
			localStorage.setItem("selectedCityData", JSON.stringify({ city, selectedAt: new Date().toISOString() }));

			// Dispatch a custom event to inform the parent/main page
			const event = new CustomEvent("locationSelected", {
				detail: { location: fav.city, lat: fav.lat, lng: fav.lng },
				bubbles: true,
			});
			document.dispatchEvent(event);
		}

		// Hide dropdown after selection
		dropdownMenu.classList.add("hidden");
	});
</script>
